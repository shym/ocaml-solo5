From 48b442a8dc4e763dfa74f181883f12be6ab49337 Mon Sep 17 00:00:00 2001
From: Samuel Hym <samuel.hym@rustyne.lautre.net>
Date: Wed, 21 Feb 2024 18:47:12 +0100
Subject: [PATCH 04/14] Detect and use {CC,...}_FOR_BUILD to build sak

---
 Makefile                          |   9 +-
 Makefile.config.in                |   4 +
 aclocal.m4                        |   1 +
 build-aux/ax_prog_cc_for_build.m4 | 155 ++++++++++++++++++++++++++++++
 configure                         | Bin 647386 -> 682453 bytes
 configure.ac                      |  10 +-
 6 files changed, 172 insertions(+), 7 deletions(-)
 create mode 100644 build-aux/ax_prog_cc_for_build.m4

diff --git a/Makefile b/Makefile
index 71d41cd2d6..df191af79c 100644
--- a/Makefile
+++ b/Makefile
@@ -1284,11 +1284,10 @@ runtime/caml/jumptbl.h : runtime/caml/instruct.h
 	sed -n -e '/^  /s/ \([A-Z]\)/ \&\&lbl_\1/gp' \
 	       -e '/^}/q' > $@
 
-# These are provided as a temporary shim to allow cross-compilation systems
-# to supply a host C compiler and different flags and a linking macro.
-SAK_CC ?= $(CC)
-SAK_CFLAGS ?= $(OC_CFLAGS) $(CFLAGS) $(OC_CPPFLAGS) $(CPPFLAGS)
-SAK_LINK ?= $(MKEXE_VIA_CC)
+SAK_CC ?= $(CC_FOR_BUILD)
+SAK_CFLAGS ?=\
+  $(OC_CFLAGS) $(CFLAGS_FOR_BUILD) $(OC_CPPFLAGS) $(CPPFLAGS_FOR_BUILD)
+SAK_LINK ?= $(SAK_CC) $(SAK_CFLAGS) $(OC_EXE_LDFLAGS) $(OUTPUTEXE)$(1) $(2)
 
 $(SAK): runtime/sak.$(O)
 	$(V_MKEXE)$(call SAK_LINK,$@,$^)
diff --git a/Makefile.config.in b/Makefile.config.in
index 559738f6ed..4243bebad9 100644
--- a/Makefile.config.in
+++ b/Makefile.config.in
@@ -65,11 +65,13 @@ LIBTOOL = $(TOP_BUILDDIR)/libtool
 ### Which C compiler to use
 TOOLPREF=@ac_tool_prefix@
 CC=@CC@
+CC_FOR_BUILD=@CC_FOR_BUILD@
 
 CC_HAS_DEBUG_PREFIX_MAP=@cc_has_debug_prefix_map@
 AS_HAS_DEBUG_PREFIX_MAP=@as_has_debug_prefix_map@
 
 LDFLAGS?=@LDFLAGS@
+LDFLAGS_FOR_BUILD=@LDFLAGS_FOR_BUILD@
 
 ### How to invoke the C preprocessor through the C compiler
 CPP=@CPP@
@@ -160,7 +162,9 @@ UNIX_OR_WIN32=@unix_or_win32@
 INSTALL_SOURCE_ARTIFACTS=@install_source_artifacts@
 
 CFLAGS=@CFLAGS@
+CFLAGS_FOR_BUILD=@CFLAGS_FOR_BUILD@
 CPPFLAGS=@CPPFLAGS@
+CPPFLAGS_FOR_BUILD=@CPPFLAGS_FOR_BUILD@
 OCAMLC_CFLAGS=@ocamlc_cflags@
 
 OCAMLC_CPPFLAGS=@ocamlc_cppflags@
diff --git a/aclocal.m4 b/aclocal.m4
index cb73385dda..d2e58a45f6 100644
--- a/aclocal.m4
+++ b/aclocal.m4
@@ -30,6 +30,7 @@ m4_include([build-aux/ax_check_compile_flag.m4])
 
 # Macros from the autoconf macro archive
 m4_include([build-aux/ax_func_which_gethostbyname_r.m4])
+m4_include([build-aux/ax_prog_cc_for_build.m4])
 m4_include([build-aux/ax_pthread.m4])
 
 # OCaml version
diff --git a/build-aux/ax_prog_cc_for_build.m4 b/build-aux/ax_prog_cc_for_build.m4
new file mode 100644
index 0000000000..1db8d73f96
--- /dev/null
+++ b/build-aux/ax_prog_cc_for_build.m4
@@ -0,0 +1,155 @@
+# ===========================================================================
+#   https://www.gnu.org/software/autoconf-archive/ax_prog_cc_for_build.html
+# ===========================================================================
+#
+# SYNOPSIS
+#
+#   AX_PROG_CC_FOR_BUILD
+#
+# DESCRIPTION
+#
+#   This macro searches for a C compiler that generates native executables,
+#   that is a C compiler that surely is not a cross-compiler. This can be
+#   useful if you have to generate source code at compile-time like for
+#   example GCC does.
+#
+#   The macro sets the CC_FOR_BUILD and CPP_FOR_BUILD macros to anything
+#   needed to compile or link (CC_FOR_BUILD) and preprocess (CPP_FOR_BUILD).
+#   The value of these variables can be overridden by the user by specifying
+#   a compiler with an environment variable (like you do for standard CC).
+#
+#   It also sets BUILD_EXEEXT and BUILD_OBJEXT to the executable and object
+#   file extensions for the build platform, and GCC_FOR_BUILD to `yes' if
+#   the compiler we found is GCC. All these variables but GCC_FOR_BUILD are
+#   substituted in the Makefile.
+#
+# LICENSE
+#
+#   Copyright (c) 2008 Paolo Bonzini <bonzini@gnu.org>
+#
+#   Copying and distribution of this file, with or without modification, are
+#   permitted in any medium without royalty provided the copyright notice
+#   and this notice are preserved. This file is offered as-is, without any
+#   warranty.
+
+#serial 21
+
+AU_ALIAS([AC_PROG_CC_FOR_BUILD], [AX_PROG_CC_FOR_BUILD])
+AC_DEFUN([AX_PROG_CC_FOR_BUILD], [dnl
+AC_REQUIRE([AC_PROG_CC])dnl
+AC_REQUIRE([AC_PROG_CPP])dnl
+AC_REQUIRE([AC_CANONICAL_BUILD])dnl
+
+dnl Use the standard macros, but make them use other variable names
+dnl
+pushdef([ac_cv_prog_CPP], ac_cv_build_prog_CPP)dnl
+pushdef([ac_cv_prog_cc_c89], ac_cv_build_prog_cc_c89)dnl
+pushdef([ac_cv_prog_cc_c99], ac_cv_build_prog_cc_c99)dnl
+pushdef([ac_cv_prog_cc_c11], ac_cv_build_prog_cc_c11)dnl
+pushdef([ac_cv_prog_gcc], ac_cv_build_prog_gcc)dnl
+pushdef([ac_cv_prog_cc_works], ac_cv_build_prog_cc_works)dnl
+pushdef([ac_cv_prog_cc_cross], ac_cv_build_prog_cc_cross)dnl
+pushdef([ac_cv_prog_cc_g], ac_cv_build_prog_cc_g)dnl
+pushdef([ac_cv_c_compiler_gnu], ac_cv_build_c_compiler_gnu)dnl
+pushdef([ac_cv_exeext], ac_cv_build_exeext)dnl
+pushdef([ac_cv_objext], ac_cv_build_objext)dnl
+pushdef([ac_exeext], ac_build_exeext)dnl
+pushdef([ac_objext], ac_build_objext)dnl
+pushdef([CC], CC_FOR_BUILD)dnl
+pushdef([CPP], CPP_FOR_BUILD)dnl
+pushdef([GCC], GCC_FOR_BUILD)dnl
+pushdef([CFLAGS], CFLAGS_FOR_BUILD)dnl
+pushdef([CPPFLAGS], CPPFLAGS_FOR_BUILD)dnl
+pushdef([EXEEXT], BUILD_EXEEXT)dnl
+pushdef([LDFLAGS], LDFLAGS_FOR_BUILD)dnl
+pushdef([OBJEXT], BUILD_OBJEXT)dnl
+pushdef([host], build)dnl
+pushdef([host_alias], build_alias)dnl
+pushdef([host_cpu], build_cpu)dnl
+pushdef([host_vendor], build_vendor)dnl
+pushdef([host_os], build_os)dnl
+pushdef([ac_cv_host], ac_cv_build)dnl
+pushdef([ac_cv_host_alias], ac_cv_build_alias)dnl
+pushdef([ac_cv_host_cpu], ac_cv_build_cpu)dnl
+pushdef([ac_cv_host_vendor], ac_cv_build_vendor)dnl
+pushdef([ac_cv_host_os], ac_cv_build_os)dnl
+pushdef([ac_tool_prefix], ac_build_tool_prefix)dnl
+pushdef([am_cv_CC_dependencies_compiler_type], am_cv_build_CC_dependencies_compiler_type)dnl
+pushdef([am_cv_prog_cc_c_o], am_cv_build_prog_cc_c_o)dnl
+pushdef([cross_compiling], cross_compiling_build)dnl
+
+cross_compiling_build=no
+
+ac_build_tool_prefix=
+AS_IF([test -n "$build"],      [ac_build_tool_prefix="$build-"],
+      [test -n "$build_alias"],[ac_build_tool_prefix="$build_alias-"])
+
+AC_LANG_PUSH([C])
+
+dnl The pushdef([ac_cv_c_compiler_gnu], ...) currently does not cover
+dnl the use of this variable in _AC_LANG_COMPILER_GNU called by
+dnl AC_PROG_CC. Unset this cache variable temporarily as a workaround.
+was_set_c_compiler_gnu=${[ac_cv_c_compiler_gnu]+y}
+AS_IF([test ${was_set_c_compiler_gnu}],
+    [saved_c_compiler_gnu=$[ac_cv_c_compiler_gnu]
+    AS_UNSET([[ac_cv_c_compiler_gnu]])])
+
+AC_PROG_CC
+
+dnl Restore ac_cv_c_compiler_gnu
+AS_IF([test ${was_set_c_compiler_gnu}],
+  [[ac_cv_c_compiler_gnu]=$[saved_c_compiler_gnu]])
+
+_AC_COMPILER_EXEEXT
+_AC_COMPILER_OBJEXT
+AC_PROG_CPP
+
+dnl Restore the old definitions
+dnl
+popdef([cross_compiling])dnl
+popdef([am_cv_prog_cc_c_o])dnl
+popdef([am_cv_CC_dependencies_compiler_type])dnl
+popdef([ac_tool_prefix])dnl
+popdef([ac_cv_host_os])dnl
+popdef([ac_cv_host_vendor])dnl
+popdef([ac_cv_host_cpu])dnl
+popdef([ac_cv_host_alias])dnl
+popdef([ac_cv_host])dnl
+popdef([host_os])dnl
+popdef([host_vendor])dnl
+popdef([host_cpu])dnl
+popdef([host_alias])dnl
+popdef([host])dnl
+popdef([OBJEXT])dnl
+popdef([LDFLAGS])dnl
+popdef([EXEEXT])dnl
+popdef([CPPFLAGS])dnl
+popdef([CFLAGS])dnl
+popdef([GCC])dnl
+popdef([CPP])dnl
+popdef([CC])dnl
+popdef([ac_objext])dnl
+popdef([ac_exeext])dnl
+popdef([ac_cv_objext])dnl
+popdef([ac_cv_exeext])dnl
+popdef([ac_cv_c_compiler_gnu])dnl
+popdef([ac_cv_prog_cc_g])dnl
+popdef([ac_cv_prog_cc_cross])dnl
+popdef([ac_cv_prog_cc_works])dnl
+popdef([ac_cv_prog_cc_c89])dnl
+popdef([ac_cv_prog_gcc])dnl
+popdef([ac_cv_prog_CPP])dnl
+
+dnl restore global variables ac_ext, ac_cpp, ac_compile,
+dnl ac_link, ac_compiler_gnu (dependant on the current
+dnl language after popping):
+AC_LANG_POP([C])
+
+dnl Finally, set Makefile variables
+dnl
+AC_SUBST(BUILD_EXEEXT)dnl
+AC_SUBST(BUILD_OBJEXT)dnl
+AC_SUBST([CFLAGS_FOR_BUILD])dnl
+AC_SUBST([CPPFLAGS_FOR_BUILD])dnl
+AC_SUBST([LDFLAGS_FOR_BUILD])dnl
+])
diff --git a/configure b/configure
index 8da296aaa838196901735466a6d3636fcb77439e..d6492a8ce6f87d238842d7ac018b81ec667646a8 100755
GIT binary patch
delta 6794
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

delta 62
zcmcb5S@YIG^$oN9nkD?(CHxtIm<foPftY2xgg@)1?bF@mIr*nYv$Kh`XZ5oIF*^`*
LY|rZF%)SKx%M2DD

diff --git a/configure.ac b/configure.ac
index c04ee82f96..404216bc4a 100644
--- a/configure.ac
+++ b/configure.ac
@@ -784,8 +784,14 @@ dnl nefarious single quotes which may appear in any of the strings.
 
 AS_IF(
   [test x"$host" = x"$target"],
-    [cross_compiler=false],
-    [cross_compiler=true])
+    [cross_compiler=false
+    CC_FOR_BUILD='$(CC)'
+    CFLAGS_FOR_BUILD='$(CFLAGS)'
+    CPPFLAGS_FOR_BUILD='$(CPPFLAGS)'
+    LDFLAGS_FOR_BUILD='$(LDFLAGS)'],
+    [cross_compiler=true
+    AC_MSG_NOTICE([detecting the C toolchain for build])
+    AX_PROG_CC_FOR_BUILD])
 
 # Checks for programs
 
-- 
2.43.0

