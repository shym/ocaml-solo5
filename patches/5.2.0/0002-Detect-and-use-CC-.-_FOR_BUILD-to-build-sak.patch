From 709f0573420e06e89ccf59ebfff23582076c8b9d Mon Sep 17 00:00:00 2001
From: Samuel Hym <samuel@tarides.com>
Date: Wed, 21 Feb 2024 18:47:12 +0100
Subject: [PATCH 02/14] Detect and use {CC,...}_FOR_BUILD to build sak

---
 Makefile                          |   9 +-
 Makefile.config.in                |   4 +
 aclocal.m4                        |   1 +
 build-aux/ax_prog_cc_for_build.m4 | 155 ++++++++++++++++++++++++++++++
 configure                         | Bin 647324 -> 682391 bytes
 configure.ac                      |  10 +-
 6 files changed, 172 insertions(+), 7 deletions(-)
 create mode 100644 build-aux/ax_prog_cc_for_build.m4

diff --git a/Makefile b/Makefile
index 71d41cd2d6..df191af79c 100644
--- a/Makefile
+++ b/Makefile
@@ -1284,11 +1284,10 @@ runtime/caml/jumptbl.h : runtime/caml/instruct.h
 	sed -n -e '/^  /s/ \([A-Z]\)/ \&\&lbl_\1/gp' \
 	       -e '/^}/q' > $@
 
-# These are provided as a temporary shim to allow cross-compilation systems
-# to supply a host C compiler and different flags and a linking macro.
-SAK_CC ?= $(CC)
-SAK_CFLAGS ?= $(OC_CFLAGS) $(CFLAGS) $(OC_CPPFLAGS) $(CPPFLAGS)
-SAK_LINK ?= $(MKEXE_VIA_CC)
+SAK_CC ?= $(CC_FOR_BUILD)
+SAK_CFLAGS ?=\
+  $(OC_CFLAGS) $(CFLAGS_FOR_BUILD) $(OC_CPPFLAGS) $(CPPFLAGS_FOR_BUILD)
+SAK_LINK ?= $(SAK_CC) $(SAK_CFLAGS) $(OC_EXE_LDFLAGS) $(OUTPUTEXE)$(1) $(2)
 
 $(SAK): runtime/sak.$(O)
 	$(V_MKEXE)$(call SAK_LINK,$@,$^)
diff --git a/Makefile.config.in b/Makefile.config.in
index 559738f6ed..4243bebad9 100644
--- a/Makefile.config.in
+++ b/Makefile.config.in
@@ -65,11 +65,13 @@ LIBTOOL = $(TOP_BUILDDIR)/libtool
 ### Which C compiler to use
 TOOLPREF=@ac_tool_prefix@
 CC=@CC@
+CC_FOR_BUILD=@CC_FOR_BUILD@
 
 CC_HAS_DEBUG_PREFIX_MAP=@cc_has_debug_prefix_map@
 AS_HAS_DEBUG_PREFIX_MAP=@as_has_debug_prefix_map@
 
 LDFLAGS?=@LDFLAGS@
+LDFLAGS_FOR_BUILD=@LDFLAGS_FOR_BUILD@
 
 ### How to invoke the C preprocessor through the C compiler
 CPP=@CPP@
@@ -160,7 +162,9 @@ UNIX_OR_WIN32=@unix_or_win32@
 INSTALL_SOURCE_ARTIFACTS=@install_source_artifacts@
 
 CFLAGS=@CFLAGS@
+CFLAGS_FOR_BUILD=@CFLAGS_FOR_BUILD@
 CPPFLAGS=@CPPFLAGS@
+CPPFLAGS_FOR_BUILD=@CPPFLAGS_FOR_BUILD@
 OCAMLC_CFLAGS=@ocamlc_cflags@
 
 OCAMLC_CPPFLAGS=@ocamlc_cppflags@
diff --git a/aclocal.m4 b/aclocal.m4
index cb73385dda..d2e58a45f6 100644
--- a/aclocal.m4
+++ b/aclocal.m4
@@ -30,6 +30,7 @@ m4_include([build-aux/ax_check_compile_flag.m4])
 
 # Macros from the autoconf macro archive
 m4_include([build-aux/ax_func_which_gethostbyname_r.m4])
+m4_include([build-aux/ax_prog_cc_for_build.m4])
 m4_include([build-aux/ax_pthread.m4])
 
 # OCaml version
diff --git a/build-aux/ax_prog_cc_for_build.m4 b/build-aux/ax_prog_cc_for_build.m4
new file mode 100644
index 0000000000..1db8d73f96
--- /dev/null
+++ b/build-aux/ax_prog_cc_for_build.m4
@@ -0,0 +1,155 @@
+# ===========================================================================
+#   https://www.gnu.org/software/autoconf-archive/ax_prog_cc_for_build.html
+# ===========================================================================
+#
+# SYNOPSIS
+#
+#   AX_PROG_CC_FOR_BUILD
+#
+# DESCRIPTION
+#
+#   This macro searches for a C compiler that generates native executables,
+#   that is a C compiler that surely is not a cross-compiler. This can be
+#   useful if you have to generate source code at compile-time like for
+#   example GCC does.
+#
+#   The macro sets the CC_FOR_BUILD and CPP_FOR_BUILD macros to anything
+#   needed to compile or link (CC_FOR_BUILD) and preprocess (CPP_FOR_BUILD).
+#   The value of these variables can be overridden by the user by specifying
+#   a compiler with an environment variable (like you do for standard CC).
+#
+#   It also sets BUILD_EXEEXT and BUILD_OBJEXT to the executable and object
+#   file extensions for the build platform, and GCC_FOR_BUILD to `yes' if
+#   the compiler we found is GCC. All these variables but GCC_FOR_BUILD are
+#   substituted in the Makefile.
+#
+# LICENSE
+#
+#   Copyright (c) 2008 Paolo Bonzini <bonzini@gnu.org>
+#
+#   Copying and distribution of this file, with or without modification, are
+#   permitted in any medium without royalty provided the copyright notice
+#   and this notice are preserved. This file is offered as-is, without any
+#   warranty.
+
+#serial 21
+
+AU_ALIAS([AC_PROG_CC_FOR_BUILD], [AX_PROG_CC_FOR_BUILD])
+AC_DEFUN([AX_PROG_CC_FOR_BUILD], [dnl
+AC_REQUIRE([AC_PROG_CC])dnl
+AC_REQUIRE([AC_PROG_CPP])dnl
+AC_REQUIRE([AC_CANONICAL_BUILD])dnl
+
+dnl Use the standard macros, but make them use other variable names
+dnl
+pushdef([ac_cv_prog_CPP], ac_cv_build_prog_CPP)dnl
+pushdef([ac_cv_prog_cc_c89], ac_cv_build_prog_cc_c89)dnl
+pushdef([ac_cv_prog_cc_c99], ac_cv_build_prog_cc_c99)dnl
+pushdef([ac_cv_prog_cc_c11], ac_cv_build_prog_cc_c11)dnl
+pushdef([ac_cv_prog_gcc], ac_cv_build_prog_gcc)dnl
+pushdef([ac_cv_prog_cc_works], ac_cv_build_prog_cc_works)dnl
+pushdef([ac_cv_prog_cc_cross], ac_cv_build_prog_cc_cross)dnl
+pushdef([ac_cv_prog_cc_g], ac_cv_build_prog_cc_g)dnl
+pushdef([ac_cv_c_compiler_gnu], ac_cv_build_c_compiler_gnu)dnl
+pushdef([ac_cv_exeext], ac_cv_build_exeext)dnl
+pushdef([ac_cv_objext], ac_cv_build_objext)dnl
+pushdef([ac_exeext], ac_build_exeext)dnl
+pushdef([ac_objext], ac_build_objext)dnl
+pushdef([CC], CC_FOR_BUILD)dnl
+pushdef([CPP], CPP_FOR_BUILD)dnl
+pushdef([GCC], GCC_FOR_BUILD)dnl
+pushdef([CFLAGS], CFLAGS_FOR_BUILD)dnl
+pushdef([CPPFLAGS], CPPFLAGS_FOR_BUILD)dnl
+pushdef([EXEEXT], BUILD_EXEEXT)dnl
+pushdef([LDFLAGS], LDFLAGS_FOR_BUILD)dnl
+pushdef([OBJEXT], BUILD_OBJEXT)dnl
+pushdef([host], build)dnl
+pushdef([host_alias], build_alias)dnl
+pushdef([host_cpu], build_cpu)dnl
+pushdef([host_vendor], build_vendor)dnl
+pushdef([host_os], build_os)dnl
+pushdef([ac_cv_host], ac_cv_build)dnl
+pushdef([ac_cv_host_alias], ac_cv_build_alias)dnl
+pushdef([ac_cv_host_cpu], ac_cv_build_cpu)dnl
+pushdef([ac_cv_host_vendor], ac_cv_build_vendor)dnl
+pushdef([ac_cv_host_os], ac_cv_build_os)dnl
+pushdef([ac_tool_prefix], ac_build_tool_prefix)dnl
+pushdef([am_cv_CC_dependencies_compiler_type], am_cv_build_CC_dependencies_compiler_type)dnl
+pushdef([am_cv_prog_cc_c_o], am_cv_build_prog_cc_c_o)dnl
+pushdef([cross_compiling], cross_compiling_build)dnl
+
+cross_compiling_build=no
+
+ac_build_tool_prefix=
+AS_IF([test -n "$build"],      [ac_build_tool_prefix="$build-"],
+      [test -n "$build_alias"],[ac_build_tool_prefix="$build_alias-"])
+
+AC_LANG_PUSH([C])
+
+dnl The pushdef([ac_cv_c_compiler_gnu], ...) currently does not cover
+dnl the use of this variable in _AC_LANG_COMPILER_GNU called by
+dnl AC_PROG_CC. Unset this cache variable temporarily as a workaround.
+was_set_c_compiler_gnu=${[ac_cv_c_compiler_gnu]+y}
+AS_IF([test ${was_set_c_compiler_gnu}],
+    [saved_c_compiler_gnu=$[ac_cv_c_compiler_gnu]
+    AS_UNSET([[ac_cv_c_compiler_gnu]])])
+
+AC_PROG_CC
+
+dnl Restore ac_cv_c_compiler_gnu
+AS_IF([test ${was_set_c_compiler_gnu}],
+  [[ac_cv_c_compiler_gnu]=$[saved_c_compiler_gnu]])
+
+_AC_COMPILER_EXEEXT
+_AC_COMPILER_OBJEXT
+AC_PROG_CPP
+
+dnl Restore the old definitions
+dnl
+popdef([cross_compiling])dnl
+popdef([am_cv_prog_cc_c_o])dnl
+popdef([am_cv_CC_dependencies_compiler_type])dnl
+popdef([ac_tool_prefix])dnl
+popdef([ac_cv_host_os])dnl
+popdef([ac_cv_host_vendor])dnl
+popdef([ac_cv_host_cpu])dnl
+popdef([ac_cv_host_alias])dnl
+popdef([ac_cv_host])dnl
+popdef([host_os])dnl
+popdef([host_vendor])dnl
+popdef([host_cpu])dnl
+popdef([host_alias])dnl
+popdef([host])dnl
+popdef([OBJEXT])dnl
+popdef([LDFLAGS])dnl
+popdef([EXEEXT])dnl
+popdef([CPPFLAGS])dnl
+popdef([CFLAGS])dnl
+popdef([GCC])dnl
+popdef([CPP])dnl
+popdef([CC])dnl
+popdef([ac_objext])dnl
+popdef([ac_exeext])dnl
+popdef([ac_cv_objext])dnl
+popdef([ac_cv_exeext])dnl
+popdef([ac_cv_c_compiler_gnu])dnl
+popdef([ac_cv_prog_cc_g])dnl
+popdef([ac_cv_prog_cc_cross])dnl
+popdef([ac_cv_prog_cc_works])dnl
+popdef([ac_cv_prog_cc_c89])dnl
+popdef([ac_cv_prog_gcc])dnl
+popdef([ac_cv_prog_CPP])dnl
+
+dnl restore global variables ac_ext, ac_cpp, ac_compile,
+dnl ac_link, ac_compiler_gnu (dependant on the current
+dnl language after popping):
+AC_LANG_POP([C])
+
+dnl Finally, set Makefile variables
+dnl
+AC_SUBST(BUILD_EXEEXT)dnl
+AC_SUBST(BUILD_OBJEXT)dnl
+AC_SUBST([CFLAGS_FOR_BUILD])dnl
+AC_SUBST([CPPFLAGS_FOR_BUILD])dnl
+AC_SUBST([LDFLAGS_FOR_BUILD])dnl
+])
diff --git a/configure b/configure
index 6dc7cc751737b1eb9de8d4049914762692a20a7a..4edee451f1e66ed77232e80e609dc22bbc52fde9 100755
GIT binary patch
delta 6740
zcmds5eNa@_6`y;SUEqm)jI8n%c>7#f6n7C4KucFe7L5*7Fm1<noW8)i5F+j(yF^k3
z(Xlg@Ok0RFoQY`@(#|xkO*^5T>1$`ws(<8<j<HJGkSS<|PW<>Ij>UFt%xCX=_wBy>
zcA;ZM`-gAl&D?YEx#!;VyXT&J&iTO^7yfzG8{ghB(CFLJShw{FdCSgS^5(B>YxD{A
zO-%`1@f{kcymRyRhTUHl7}2o1K_%#HPF9Ow_DAIUdalb%939+oY;XsmKhWPo|0HE_
zhgDVvMEdc(UYE19zJ8TU&<5f*qz!6)QHBI1G#0&AXG+jr<<UD~l?$&~ZB9ITFr~6^
zZy*xzM>>M-V&tiSST9CGp-%r(EgeCzEz~XIpAM6Pk<5*@f&b3e+SAdwR}wdrRM++k
zg5d8Cg~PHxw7;vPlZuwLVQ(-b2oyGrkkxhMuI@lvN3U1tXcHrWa71(mMajuz33NL_
z@e33aZHk}DH_g%c+>#LJOq?#abau3ar8prA$Y9KF2}4zo*J>Q7=u9*im#P6%EI={k
zk5P2{>5RDJn@`4wW6F-3I!U_Bt>q4h{!p+@g~1sEDbO1T^hWMZs_0BObab3ce$2!0
zj_tZzZV&d*GdkE3mcxOFY##7p)+3Nt5k=J5H$Pjyfo!<tnZRBdXD2PiHr0UpM4X$n
zWT$#-#hxHtfRRw!|8T-<)!@ZX&Js~?w%h_A%5Re|>hy`X$w|RDX?*oPs88b!2cQ2C
z?74i8SK=&7nR}CbmE^>Y_eG5a$$2tXYsmMi=Hq{c-mOr(**`@ORl8+|IK12n^#Vt?
zoFX|qJ#dPI@bpnjezn2W=#y$yj}c@SG|m-zx$QUluz8w@IDLUk#lwJ^*GUTBNs-7e
z;#Z+asOs>ZR>flv$ue`b`~8@8!18@FuoVYk8Lvsx729&2RyD^9?^tboCsn`DEN1*K
z<VcBuuq1lL-kA1gUyen$iPOe>93H*^J-QLhzDsuL&7Bia{)B1w2`bXJN)+2VsA~%c
zXv@UR0Ga1}@%c$&=fV8RB#{i8T#lC}$v&Ol`X2ci&w9UY@)v(4uRLg*Jb+cxW`$2(
zw7KxWG<jz+sv$M6GUePwqL4J>%)Jt3oF~s==4Eo2mp*)%{D!Bu%#iIoJv>9)4;l#V
za%P%McH#q)$DjTFNyxy{S4lE{JWHZR=}^e)=4tn42P+Z{lzBzEKsLVeJMulRiQ_?d
zr~{ZEhBUJ_o-j!F=(ChxUL{3@KS>puMffY;!+hxvWX!zNdv;X3Sn8*baP;VDQbOZO
z!-nsJ-`c{<V=oQwnxlS;x-NnKu?OdyG_2!iqS-us=(#~Q=;pfb26;UmcQaUvdoCR}
z$TGZklMMY|uH|ChOb3q7kxTJdEW!rU`7@v%ZT2P^!QtZ;n;GAGHb%3U`~PYVnD&2v
zUQJ0gRP7g73KDOtl2}qggW5i^s~fMElR^C921r+mKO_Sd{O1JJ;6MJDl&1W&0Ny3c
zf?pUXF8pyJ+*xT{J@2!DaP&3b%4>l?FM<M(!C3ZeznWpFLAA_s2^veq<rFwu1ohd*
z9GW5d16`4@=*GILlzbd=q%5(|H{6bA4iO3aL>Me%S%DTL`u%ddnw+U=Y1~p?$=xnt
z%irPU(IKlXBW@DTtg~g~j00>-jpe+Ogkz<|K6>3+jh=5<Ye%;y=i*6Uau&WQL3tL>
zNrelkICst3pmE}pzfX4PZXmQ0Y79I_hW}MMABA;JIG%3a7M}UomV;gUY*xH^m{{@O
zPFT-hqP4{k4U3wKp=6D*A=N?BgW^NGI6QEu81i{xCySxzf0Hm<3^}}nJH_xVp6)M!
zjd64#PL;qTIxx3O;Bmd_bwS}0WBbC$_$?ofxxmNIZ?1%GI{%td@WxQI;~Q?s(nr2q
z3LE%IpSfcgeNYOoWtkE7S5)AH2i}^e`_*zNV6YFah5{~VHl;L;K2eVWG{HE&8r=F$
zF0F=Pekc3O%y3ZJ1jp5~7#!|3^T08@29ELaI5=eYLU5dRF9=7G2VT>+`j!VK^yUlY
zP|DPPlLBzJYQJ9|Q#*65S?#g4X0<6@h@Y;FSwU_^OzkHt=24qkK?Z)OnFx5X0(uqz
z;Kj;?0QjhKK>)t?XbgbQAB_QU{xKbZ%`EYxKE=OoJ*x<b{i<t8NMm?6Xf}t!su(WY
zt6<|pSCZMxu9La)LQ68yc<C;xE?SKx-|J-6mpDo4i-t$GC3oRy2BhQlnUrc}_a|i9
zR?HS=WhMI5s85^r>P3@Eb{!inpnF>!N&~ktW`S+Q!OvAaWiX^pXT=6>O!+Jcc3X0J
zzGyLm$@QneI(A`{6De@pqPOW9NA<T8v(lj<H6{Tw3!sSItApuK%}RqZ+rCjsWVF}G
zs<q0gbf^S91y|-WVMLex>-TT$A$WNi<VExIJIkOn+ID1v7;V>O!<A%h6D|*qKW(c)
zza4hrIa&+Fvv$ac@*PSC5kIm+rtSq&m&1CzH394JbC<=6hn7Rz5~fS2_31z_&b?%*
zQN$JSH_$czG#7qLbag2UHlMKC@mxM^(gmg!z)GgRrvM69bFw0a`kL%WRDD*tM$cKY
z;-R}YIx2Nj)+>9AXHN^zSnRe}%`^Biy-}nxb$b)D6MhzcecGD0l%dVaXiZr6BO2=c
zYTCM~+*nzpRdRD;Bf1-;xGu$V(fU%-fJs^t4eIy>wE&blNWRZ>b@XapQ&TjE<gQ(8
zEM6#e18UUT5sb8n_;OK_X9>3es#U(FTt}l%shPE=TKTtP(^YHhLuW-f>?q=VCUw7f
Y;c?3)A{-NJHu@*iKSdF2smG`O1FlJg@Bjb+

delta 62
zcmbP!S#!=o^$i_<&20YdZ2pWu%ml>DK+Lk8&7U=4`}CCy*!ib_XJZp-XX|GJVs;?r
L*v{6^Iq?<%q2Cnc

diff --git a/configure.ac b/configure.ac
index 0c9d63859a..e23db6acd5 100644
--- a/configure.ac
+++ b/configure.ac
@@ -784,8 +784,14 @@ dnl nefarious single quotes which may appear in any of the strings.
 
 AS_IF(
   [test x"$host" = x"$target"],
-    [cross_compiler=false],
-    [cross_compiler=true])
+    [cross_compiler=false
+    CC_FOR_BUILD='$(CC)'
+    CFLAGS_FOR_BUILD='$(CFLAGS)'
+    CPPFLAGS_FOR_BUILD='$(CPPFLAGS)'
+    LDFLAGS_FOR_BUILD='$(LDFLAGS)'],
+    [cross_compiler=true
+    AC_MSG_NOTICE([detecting the C toolchain for build])
+    AX_PROG_CC_FOR_BUILD])
 
 # Checks for programs
 
-- 
2.45.2

